@{
ViewData["Title"] = "BST Visualization";
}

<h1 class="mt-4 mb-4 text-center">Binary Search Tree Visualization</h1>

<div id="bstVisualization" style="border:1px solid #ccc; padding: 20px; margin-bottom: 50px; width: 100%; height: 800px; overflow: auto;">
    <svg id="bstSvg" width="1600" height="1600"></svg>
</div>

@section Scripts {
<script src="https://d3js.org/d3.v7.min.js"></script>
<script>
    fetch('@Url.Action("GetTreeData", "BinarySearchTree")')
        .then(response => response.json())
        .then(data => {
            visualizeBST(data);
        })
        .catch(error => console.error('Error fetching tree data:', error));

    function visualizeBST(data) {
        const svg = d3.select("#bstSvg");
        const width = +svg.attr("width");
        const height = +svg.attr("height");

        const zoom = d3.zoom()
            .scaleExtent([0.5, 2]) 
            .on("zoom", zoomed);

        svg.call(zoom); 

        const g = svg.append("g")
            .attr("transform", "translate(800,50)"); 

        const treeLayout = d3.tree().size([height - 100, width - 200]);

        const root = d3.hierarchy(data, d => d.children);
        treeLayout(root);

        g.selectAll('.link')
            .data(root.links())
            .enter()
            .append('path')
            .attr('class', 'link')
            .attr('d', d3.linkVertical()
                .x(d => d.x)
                .y(d => d.y))
            .attr('stroke', '#ccc')
            .attr('fill', 'none');

        const node = g.selectAll('.node')
            .data(root.descendants())
            .enter()
            .append('g')
            .attr('class', 'node')
            .attr('transform', d => `translate(${d.x},${d.y})`);

        node.append('circle')
            .attr('r', 20)
            .attr('fill', '#69b3a2')
            .attr('stroke', '#333')
            .attr('stroke-width', 2);

        node.append('text')
            .attr('dy', 5)
            .attr('text-anchor', 'middle')
            .attr('fill', 'white')
            .attr('font-size', '14px')
            .text(d => d.data.name);

        function zoomed(event) {
            g.attr("transform", event.transform.translate(800,50));
        }
    }
</script>
}
